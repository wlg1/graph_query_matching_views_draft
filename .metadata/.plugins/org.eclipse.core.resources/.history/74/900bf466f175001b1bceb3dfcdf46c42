package getAnsGraph;

import java.util.ArrayList;

import org.roaringbitmap.RoaringBitmap;

import answerGraph.HybAnsGraphBuilder;
import dao.BFLIndex;
import dao.MatArray;
import dao.Pool;
import graph.GraphNode;
import helper.LimitExceededException;
import helper.TimeTracker;
import query.graph.Query;
import tupleEnumerator.HybTupleEnumer;

public class makeAnsGraph {
	
	Query mQuery;
	ArrayList<Pool> mPool;
	ArrayList<MatArray> mCandLists;

	BFLIndex mBFL;
	TimeTracker tt;

	GraphNode[] mGraNodes;
	// Iterable<Integer> nodesOrder;

	ArrayList<ArrayList<GraphNode>> mInvLstsByID;
	ArrayList<RoaringBitmap> mBitsByIDArr;

	double numOutTuples;
	boolean simfilter = true;

	HybTupleEnumer tenum;
	// HybTupleEnumCache tenum;

	// query is a dag
	
	public makeAnsGraph(Query query, ArrayList<ArrayList<GraphNode>> invLstsByID, ArrayList<RoaringBitmap> bitsByIDArr,
			BFLIndex bfl) {

		mQuery = query;
		mBFL = bfl;
		mGraNodes = mBFL.getGraphNodes();
		mBitsByIDArr = bitsByIDArr;
		mInvLstsByID = invLstsByID;
		tt = new TimeTracker();

	}
	
	
	public void run() throws LimitExceededException {
		//create simulation graph obj
		HybAnsGraphBuilder agBuilder = new HybAnsGraphBuilder(mQuery, mBFL, mCandLists);
		mPool = agBuilder.run();
		
		//run MIjoin to get answer
		tenum = new HybTupleEnumer(mQuery, mPool);
		numOutTuples = tenum.enumTuples();
		
		//get answer graph using algo that outputs simulation graph
		HybAnsGraphBuilder agBuilder_2 = new HybAnsGraphBuilder(mQuery, mBFL, mCandLists);
		mPool = agBuilder_2.run();

	}
	
	

}
